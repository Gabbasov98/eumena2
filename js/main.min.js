$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

$("[data-copy]").click(function() {
    let text = $(this).attr("data-copy")
    let $tmp = $("<textarea>");
    $("body").append($tmp);
    $tmp.val(text).select();
    document.execCommand("copy");
    $tmp.remove();

    $(this).parents(".m-copy").addClass("_open")

    setTimeout(() => {
        $(this).parents(".m-copy").removeClass("_open")
    }, 5000);
})
function calc(){
    $('.cartcalc').each(function (i,el) {
        let plus = $(el).find(".ccalc-plus")
        let minus = $(el).find(".ccalc-minus")
        let input = $(el).find("input")

        $(minus).click(function(e) {
            let a = $(input).val();
            if (a > 1) {
                let b = +a - 1;
                $(input).val(b);
                $(input).trigger('change');
            } else {
                $(input).val(a);
            }
            setMinusBtnClickability()
            e.stopImmediatePropagation()
        });

        $(plus).click(function(e) {
            let a = $(input).val();
            let b = +a + 1;
            $(input).val(b);
            $(input).trigger('change');
            setMinusBtnClickability(this)
            e.stopImmediatePropagation()
        });

        function setMinusBtnClickability() {
            let val = +$(input).val()
            if(val === 1){
                $(minus).addClass("_disabled")
            } else{
                $(minus).removeClass("_disabled")
            }
        }

        setMinusBtnClickability()
    })
}
calc()

$(".about-nav__group--dynamic .about-nav__top").click(function() {
    $(this).parents(".about-nav__group").toggleClass("_active");
    $(this).siblings(".about-nav__bottom").slideToggle()
})
$("._toggle-menu").click(function () {
    $(".header").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})

$(".nav-item__show").click(function () {
    $(this).parents(".nav-item").toggleClass("_open")
    $(this).siblings(".nav-item__hidden").slideToggle();
})

$(".lang__show").click(function () {
    $(".lang").toggleClass("_open")
})

$(document).mouseup( function(e){
    let div = $( ".lang" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open")){
            $(div).removeClass("_open");
        }
    }
});

function fixHeader() {
    let scroll = $(window).scrollTop();
    let header = $(".header").height()

    if (scroll >= header / 2) {
        $(".header").addClass("_fix");
    } else {
        $(".header").removeClass("_fix");
    }
}

$(window).scroll(function() {
    fixHeader()
});
fixHeader()
function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")
        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            loop: isLoop,
            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}


Sliders()
gallery()

let filterSliders = document.querySelectorAll(".filter-slider")

filterSliders.forEach(slider => {
    const id = slider.getAttribute("data-id");
    const rangeSlider = slider.querySelector(`.range-slider`)
    const rangeInput0 = slider.querySelector(`.range-slider__input1`)
    const rangeInput1 = slider.querySelector(`.range-slider__input2`)
    const rangeInputs = [rangeInput0, rangeInput1]

    let startValue1 = +slider.getAttribute("data-start")
    let startValue2 = +slider.getAttribute("data-start2")
    let min = +slider.getAttribute("data-min")
    let max = +slider.getAttribute("data-max")

    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: [startValue1, startValue2],
            connect: true,
            step: 1,
            range: {
                'min': min,
                'max': max
            }
        });
    }
    if (rangeSlider) {
        rangeSlider.noUiSlider.on('update', function(values, handle) {
            rangeInputs[handle].value = Math.round(values[handle])
        })
        rangeInputs.forEach((el, index) => {
            el.addEventListener('change', (e) => {
                setRangeSlider(index, e.currentTarget.value)

            })
        })
    }
    const setRangeSlider = (i, value) => {
        let array = [null, null];
        array[i] = value;

        rangeSlider.noUiSlider.set(array);

    };
})

$("._toggle-filter").click(function () {
    $("body").toggleClass("fixed-body")
    $("body").toggleClass("_open-filter")
})

$(".catalog__text-toggle").click(function () {
    $(".catalog__text").toggleClass("_show-all")
})

function isInViewport(element) {
    const rect = element.getBoundingClientRect();
    return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
}

const numbers = document.querySelectorAll('.number');
numbers.forEach(number => {
    let num = number.textContent;
    number.setAttribute("num", num);
    number.textContent = '0';
    const speed = 500;

    ['scroll','DOMContentLoaded'].forEach( evt =>
        document.addEventListener(evt, function () {
            if(isInViewport(number)==1){
                const animate = () => {
                    const outerValue = +number.getAttribute('num');
                    const innerValue = +number.innerText;
                    const time = outerValue / speed;
                    if(innerValue < outerValue) {
                        number.innerText = Math.ceil(innerValue+time);
                        setTimeout(animate, 1);
                    }else{
                        number.innerText = outerValue;
                    }
                }
                animate();
            }}, {
            passive: true
        })
    );

})

let animatedElements = document.querySelectorAll('.animated');

let Visible = function(target) {
    // Все позиции элемента
    let targetPosition = {
            top: window.pageYOffset + target.getBoundingClientRect().top,
            left: window.pageXOffset + target.getBoundingClientRect().left,
            right: window.pageXOffset + target.getBoundingClientRect().right,
            bottom: window.pageYOffset + target.getBoundingClientRect().bottom
        },
        // Получаем позиции окна
        windowPosition = {
            top: window.pageYOffset,
            left: window.pageXOffset,
            right: window.pageXOffset + document.documentElement.clientWidth,
            bottom: window.pageYOffset + document.documentElement.clientHeight
        };

    if (targetPosition.bottom - 40 > windowPosition.top &&
        targetPosition.top + 40 < windowPosition.bottom) {
        target.classList.add("animated--active")
    } else {

    }
};

// Запускаем функцию при прокрутке страницы
window.addEventListener('scroll', function() {
    // Visible (element);
    initAnimElements()
});
initAnimElements()
// А также запустим функцию сразу. А то вдруг, элемент изначально видно
// Visible (element);

function initAnimElements() {
    animatedElements.forEach(el => {
        Visible(el)
    })
}

let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    $('input[type="tel"]').mask('+7 (999) 999-99-99', { autoclear: false }, { placeholder: '+7 (   )    -  -  ' });
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
